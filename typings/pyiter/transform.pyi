"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, Generic, Iterable, Iterator, List, Optional, TypeVar

"""
This type stub file was generated by pyright.
"""
T = TypeVar("T")
U = TypeVar("U")
O = TypeVar("O")
K = TypeVar("K")

class Transform(ABC, Generic[T, U], Iterable[U]):
    """A transform that applies a function to an iterable."""

    iter: Iterable[T]
    cache: Optional[List[U]]
    def __init__(self, iter: Iterable[T]) -> None: ...
    def __iter__(self) -> Iterator[U]: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    @abstractmethod
    def __do_iter__(self) -> Iterator[U]: ...
    def transforms(self) -> Iterable[Transform[Any, Any]]: ...

class NonTransform(Transform[T, T]):
    """
    A [Transform] that does not transform the values.
    """
    def __init__(self, iter: Iterable[T]) -> None: ...
    def __repr__(self) -> str: ...
    def __do_iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...

class InfinityTransform(Transform[T, T]):
    """Transform that iterates over an infinite sequence."""

    __cache__: List[T]
    def __init__(self, iter: Iterable[T]) -> None: ...
    def __repr__(self) -> str: ...
    def __do_iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...

def new_transform(iter: Iterable[T]) -> Transform[Any, T]: ...
