window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"pyiter": {"fullname": "pyiter", "modulename": "pyiter", "kind": "module", "doc": "<p>PyIter is a Python package for iterative operations inspired by the Kotlin\u3001CSharp(linq)\u3001\nTypeSrcipt and Rust . Enables strong typing and type inference for iterative operations.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pyiter</span> <span class=\"kn\">import</span> <span class=\"n\">iterate</span> <span class=\"k\">as</span> <span class=\"n\">it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;world&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># use tqdm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, "pyiter.sequence": {"fullname": "pyiter.sequence", "modulename": "pyiter.sequence", "kind": "module", "doc": "<p></p>\n"}, "pyiter.sequence.Sequence": {"fullname": "pyiter.sequence.Sequence", "modulename": "pyiter.sequence", "qualname": "Sequence", "kind": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "typing.Generic[~T], typing.Iterable[~T]"}, "pyiter.sequence.Sequence.__init__": {"fullname": "pyiter.sequence.Sequence.__init__", "modulename": "pyiter.sequence", "qualname": "Sequence.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span>)</span>"}, "pyiter.sequence.Sequence.filter": {"fullname": "pyiter.sequence.Sequence.filter", "modulename": "pyiter.sequence", "qualname": "Sequence.filter", "kind": "function", "doc": "<p>Returns a Sequence containing only elements matching the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a1&#39;, &#39;a2&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a1&#39;, &#39;b2&#39;, &#39;a2&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_indexed": {"fullname": "pyiter.sequence.Sequence.filter_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_is_instance": {"fullname": "pyiter.sequence.Sequence.filter_is_instance", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_is_instance", "kind": "function", "doc": "<p>Returns a Sequence containing all elements that are instances of specified type parameter typ.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_is_instance</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">typ</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_not": {"fullname": "pyiter.sequence.Sequence.filter_not", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_not", "kind": "function", "doc": "<p>Returns a Sequence containing all elements not matching the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_not</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b1&#39;, &#39;b2&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_not</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a2&#39;, &#39;b1&#39;, &#39;b2&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_not_none": {"fullname": "pyiter.sequence.Sequence.filter_not_none", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_not_none", "kind": "function", "doc": "<p>Returns a Sequence containing all elements that are not <code>None</code>.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_not_none</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.map": {"fullname": "pyiter.sequence.Sequence.map", "modulename": "pyiter.sequence", "qualname": "Sequence.map", "kind": "function", "doc": "<p>Returns a Sequence containing the results of applying the given [transform] function\nto each element in the original Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;A0&#39;, &#39;B1&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;hi&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.map_indexed": {"fullname": "pyiter.sequence.Sequence.map_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.map_indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.map_async": {"fullname": "pyiter.sequence.Sequence.map_async", "modulename": "pyiter.sequence", "qualname": "Sequence.map_async", "kind": "function", "doc": "<p>Similar to <code>.map()</code> but you can input a async transform then await it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">return_exceptions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "pyiter.sequence.Sequence.map_not_none": {"fullname": "pyiter.sequence.Sequence.map_not_none", "modulename": "pyiter.sequence", "qualname": "Sequence.map_not_none", "kind": "function", "doc": "<p>Returns a Sequence containing only the non-none results of applying the given [transform] function\nto each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_not_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_map": {"fullname": "pyiter.sequence.Sequence.parallel_map", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_map", "kind": "function", "doc": "<p>Returns a Sequence containing the results of applying the given [transform] function\nto each element in the original Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">],</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 14]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Thread&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Process&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Thread&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.find": {"fullname": "pyiter.sequence.Sequence.find", "modulename": "pyiter.sequence", "qualname": "Sequence.find", "kind": "function", "doc": "<p>Returns the first element matching the given [predicate], or <code>None</code> if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.find_last": {"fullname": "pyiter.sequence.Sequence.find_last", "modulename": "pyiter.sequence", "qualname": "Sequence.find_last", "kind": "function", "doc": "<p>Returns the last element matching the given [predicate], or <code>None</code> if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.first": {"fullname": "pyiter.sequence.Sequence.first", "modulename": "pyiter.sequence", "qualname": "Sequence.first", "kind": "function", "doc": "<p>Returns first element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;a&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 4:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre>\n</div>\n\n<p>Example 5:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.first_not_none_of": {"fullname": "pyiter.sequence.Sequence.first_not_none_of", "modulename": "pyiter.sequence", "qualname": "Sequence.first_not_none_of", "kind": "function", "doc": "<p>Returns the first non-<code>None</code> result of applying the given [transform] function to each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">12</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">No element of the Sequence was transformed to a non-none value.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">R</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"fullname": "pyiter.sequence.Sequence.first_not_none_of_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.first_not_none_of_or_none", "kind": "function", "doc": "<p>Returns the first non-<code>None</code> result of applying the given [transform] function to each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">12</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.first_or_none": {"fullname": "pyiter.sequence.Sequence.first_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.first_or_none", "kind": "function", "doc": "<p>Returns the first element, or <code>None</code> if the Sequence is empty.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_none</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_none</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;a&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.first_or_default": {"fullname": "pyiter.sequence.Sequence.first_or_default", "modulename": "pyiter.sequence", "qualname": "Sequence.first_or_default", "kind": "function", "doc": "<p>Returns the first element, or the given [default] if the Sequence is empty.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_default</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;a&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_default</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_default</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 4:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_default</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;d&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last": {"fullname": "pyiter.sequence.Sequence.last", "modulename": "pyiter.sequence", "qualname": "Sequence.last", "kind": "function", "doc": "<p>Returns last element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;c&#39;</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last_or_none": {"fullname": "pyiter.sequence.Sequence.last_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.last_or_none", "kind": "function", "doc": "<p>Returns the last element matching the given [predicate], or <code>None</code> if no such element was found.</p>\n\n<p>Exmaple 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_or_none</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;c&#39;</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre>\n</div>\n\n<p>Exmaple 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_or_none": {"fullname": "pyiter.sequence.Sequence.index_of_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_or_none", "kind": "function", "doc": "<p>Returns first index of [element], or None if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of": {"fullname": "pyiter.sequence.Sequence.index_of", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of", "kind": "function", "doc": "<p>Returns first index of [element], or -1 if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_or": {"fullname": "pyiter.sequence.Sequence.index_of_or", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_or", "kind": "function", "doc": "<p>Returns first index of [element], or default value if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_or_else": {"fullname": "pyiter.sequence.Sequence.index_of_or_else", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_or_else", "kind": "function", "doc": "<p>Returns first index of [element], or computes the value from a callback if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or_else</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_or_else</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last_index_of_or_none": {"fullname": "pyiter.sequence.Sequence.last_index_of_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.last_index_of_or_none", "kind": "function", "doc": "<p>Returns last index of [element], or None if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last_index_of": {"fullname": "pyiter.sequence.Sequence.last_index_of", "modulename": "pyiter.sequence", "qualname": "Sequence.last_index_of", "kind": "function", "doc": "<p>Returns last index of [element], or -1 if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last_index_of_or": {"fullname": "pyiter.sequence.Sequence.last_index_of_or", "modulename": "pyiter.sequence", "qualname": "Sequence.last_index_of_or", "kind": "function", "doc": "<p>Returns last index of [element], or default value if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.last_index_of_or_else": {"fullname": "pyiter.sequence.Sequence.last_index_of_or_else", "modulename": "pyiter.sequence", "qualname": "Sequence.last_index_of_or_else", "kind": "function", "doc": "<p>Returns last index of [element], or computes the value from a callback if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or_else</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of_or_else</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_first_or_none": {"fullname": "pyiter.sequence.Sequence.index_of_first_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_first_or_none", "kind": "function", "doc": "<p>Returns first index of element matching the given [predicate], or None if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_first": {"fullname": "pyiter.sequence.Sequence.index_of_first", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_first", "kind": "function", "doc": "<p>Returns first index of element matching the given [predicate], or -1 if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_first_or": {"fullname": "pyiter.sequence.Sequence.index_of_first_or", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_first_or", "kind": "function", "doc": "<p>Returns first index of element matching the given [predicate], or default value if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_first_or_else": {"fullname": "pyiter.sequence.Sequence.index_of_first_or_else", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_first_or_else", "kind": "function", "doc": "<p>Returns first index of element matching the given [predicate], or computes the value from a callback if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_last_or_none": {"fullname": "pyiter.sequence.Sequence.index_of_last_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_last_or_none", "kind": "function", "doc": "<p>Returns last index of element matching the given [predicate], or -1 if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_last": {"fullname": "pyiter.sequence.Sequence.index_of_last", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_last", "kind": "function", "doc": "<p>Returns last index of element matching the given [predicate], or -1 if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_last_or": {"fullname": "pyiter.sequence.Sequence.index_of_last_or", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_last_or", "kind": "function", "doc": "<p>Returns last index of element matching the given [predicate], or default value if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">99</span><span class=\"p\">)</span>\n<span class=\"go\">-99</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_last_o_else": {"fullname": "pyiter.sequence.Sequence.index_of_last_o_else", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_last_o_else", "kind": "function", "doc": "<p>Returns last index of element matching the given [predicate], or default value if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_o_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_o_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">-3</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last_o_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">))</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.single": {"fullname": "pyiter.sequence.Sequence.single", "modulename": "pyiter.sequence", "qualname": "Sequence.single", "kind": "function", "doc": "<p>Returns the single element matching the given [predicate], or throws exception if there is no\nor more than one matching element.</p>\n\n<p>Exmaple 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;a&#39;</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence contains no element matching the predicate.</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence contains more than one matching element.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.single_or_none": {"fullname": "pyiter.sequence.Sequence.single_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.single_or_none", "kind": "function", "doc": "<p>Returns the single element matching the given [predicate], or <code>None</code> if element was not found\nor more than one element was found.</p>\n\n<p>Exmaple 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single_or_none</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;a&#39;</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single_or_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">single_or_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.drop": {"fullname": "pyiter.sequence.Sequence.drop", "modulename": "pyiter.sequence", "qualname": "Sequence.drop", "kind": "function", "doc": "<p>Returns a Sequence containing all elements except first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.drop_while": {"fullname": "pyiter.sequence.Sequence.drop_while", "modulename": "pyiter.sequence", "qualname": "Sequence.drop_while", "kind": "function", "doc": "<p>Returns a Sequence containing all elements except first elements that satisfy the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 4, 1]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.skip": {"fullname": "pyiter.sequence.Sequence.skip", "modulename": "pyiter.sequence", "qualname": "Sequence.skip", "kind": "function", "doc": "<p>Returns a Sequence containing all elements except first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.skip_while": {"fullname": "pyiter.sequence.Sequence.skip_while", "modulename": "pyiter.sequence", "qualname": "Sequence.skip_while", "kind": "function", "doc": "<p>Returns a Sequence containing all elements except first elements that satisfy the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 4, 1]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.take": {"fullname": "pyiter.sequence.Sequence.take", "modulename": "pyiter.sequence", "qualname": "Sequence.take", "kind": "function", "doc": "<p>Returns an Sequence containing first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.take_while": {"fullname": "pyiter.sequence.Sequence.take_while", "modulename": "pyiter.sequence", "qualname": "Sequence.take_while", "kind": "function", "doc": "<p>Returns an Sequence containing first elements satisfying the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.take_last": {"fullname": "pyiter.sequence.Sequence.take_last", "modulename": "pyiter.sequence", "qualname": "Sequence.take_last", "kind": "function", "doc": "<p>Returns an Sequence containing last [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_last</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_last</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted": {"fullname": "pyiter.sequence.Sequence.sorted", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted", "kind": "function", "doc": "<p>Returns an Sequence that yields elements of this Sequence sorted according to their natural sort order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2, 3, 4]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_by": {"fullname": "pyiter.sequence.Sequence.sorted_by", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_by", "kind": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted according to natural sort\norder of the value returned by specified [key_selector] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Callable[..., SupportsRichComparisonT]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_descending": {"fullname": "pyiter.sequence.Sequence.sorted_descending", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_descending", "kind": "function", "doc": "<p>Returns a Sequence of all elements sorted descending according to their natural sort order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_descending</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_by_descending": {"fullname": "pyiter.sequence.Sequence.sorted_by_descending", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_by_descending", "kind": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted descending according\nto natural sort order of the value returned by specified [key_selector] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by_descending</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by_descending</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Callable[..., SupportsRichComparisonT]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_with": {"fullname": "pyiter.sequence.Sequence.sorted_with", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_with", "kind": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;aa&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bbb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_with</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;aa&#39;, &#39;bbb&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparator</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.associate": {"fullname": "pyiter.sequence.Sequence.associate", "modulename": "pyiter.sequence", "qualname": "Sequence.associate", "kind": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.associate_by": {"fullname": "pyiter.sequence.Sequence.associate_by", "modulename": "pyiter.sequence", "qualname": "Sequence.associate_by", "kind": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">{1: &#39;11&#39;, 2: &#39;22&#39;, 3: &#39;33&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">value_transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.associate_by_to": {"fullname": "pyiter.sequence.Sequence.associate_by_to", "modulename": "pyiter.sequence", "qualname": "Sequence.associate_by_to", "kind": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate_by_to</span><span class=\"p\">({},</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate_by_to</span><span class=\"p\">({},</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"s1\">&#39;!&#39;</span> <span class=\"p\">)</span>\n<span class=\"go\">{1: &#39;1!&#39;, 2: &#39;2!&#39;, 3: &#39;3!&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">value_transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.all": {"fullname": "pyiter.sequence.Sequence.all", "modulename": "pyiter.sequence", "qualname": "Sequence.all", "kind": "function", "doc": "<p>Returns True if all elements of the Sequence satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.any": {"fullname": "pyiter.sequence.Sequence.any", "modulename": "pyiter.sequence", "qualname": "Sequence.any", "kind": "function", "doc": "<p>Returns True if any elements of the Sequence satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.count": {"fullname": "pyiter.sequence.Sequence.count", "modulename": "pyiter.sequence", "qualname": "Sequence.count", "kind": "function", "doc": "<p>Returns the number of elements in the Sequence that satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.contains": {"fullname": "pyiter.sequence.Sequence.contains", "modulename": "pyiter.sequence", "qualname": "Sequence.contains", "kind": "function", "doc": "<p>Returns True if the Sequence contains the specified [value].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at": {"fullname": "pyiter.sequence.Sequence.element_at", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at", "kind": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">IndexError</span>: <span class=\"n\">Index 3 out of range</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_else": {"fullname": "pyiter.sequence.Sequence.element_at_or_else", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_else", "kind": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or the [default] value if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_else</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_else</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;default&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_default": {"fullname": "pyiter.sequence.Sequence.element_at_or_default", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_default", "kind": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or the [default] value if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_default</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_default</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;default&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_none": {"fullname": "pyiter.sequence.Sequence.element_at_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_none", "kind": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or None if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_none</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_none</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.distinct": {"fullname": "pyiter.sequence.Sequence.distinct", "modulename": "pyiter.sequence", "qualname": "Sequence.distinct", "kind": "function", "doc": "<p>Returns a new Sequence containing the distinct elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2, 3]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(1, &#39;A&#39;), (2, &#39;A&#39;), (3, &#39;C&#39;), (3, &#39;D&#39;)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.distinct_by": {"fullname": "pyiter.sequence.Sequence.distinct_by", "modulename": "pyiter.sequence", "qualname": "Sequence.distinct_by", "kind": "function", "doc": "<p>Returns a new Sequence containing the distinct elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.reduce": {"fullname": "pyiter.sequence.Sequence.reduce", "modulename": "pyiter.sequence", "qualname": "Sequence.reduce", "kind": "function", "doc": "<p>Returns the result of applying the specified [accumulator] function to the given Sequence's elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">accumulator</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.fold": {"fullname": "pyiter.sequence.Sequence.fold", "modulename": "pyiter.sequence", "qualname": "Sequence.fold", "kind": "function", "doc": "<p>Returns the result of applying the specified [accumulator] function to the given Sequence's elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">R</span>, </span><span class=\"param\"><span class=\"n\">accumulator</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">R</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sum_of": {"fullname": "pyiter.sequence.Sequence.sum_of", "modulename": "pyiter.sequence", "qualname": "Sequence.sum_of", "kind": "function", "doc": "<p>Returns the sum of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.max_of": {"fullname": "pyiter.sequence.Sequence.max_of", "modulename": "pyiter.sequence", "qualname": "Sequence.max_of", "kind": "function", "doc": "<p>Returns the maximum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.max_by_or_none": {"fullname": "pyiter.sequence.Sequence.max_by_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.max_by_or_none", "kind": "function", "doc": "<p>Returns the first element yielding the largest value of the given function\nor <code>none</code> if there are no elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;B&#39;, &#39;num&#39;: 200}</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.max_by": {"fullname": "pyiter.sequence.Sequence.max_by", "modulename": "pyiter.sequence", "qualname": "Sequence.max_by", "kind": "function", "doc": "<p>Returns the first element yielding the largest value of the given function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;B&#39;, &#39;num&#39;: 200}</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.min_of": {"fullname": "pyiter.sequence.Sequence.min_of", "modulename": "pyiter.sequence", "qualname": "Sequence.min_of", "kind": "function", "doc": "<p>Returns the minimum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.min_by_or_none": {"fullname": "pyiter.sequence.Sequence.min_by_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.min_by_or_none", "kind": "function", "doc": "<p>Returns the first element yielding the smallest value of the given function\nor <code>none</code> if there are no elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;A&#39;, &#39;num&#39;: 100}</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.min_by": {"fullname": "pyiter.sequence.Sequence.min_by", "modulename": "pyiter.sequence", "qualname": "Sequence.min_by", "kind": "function", "doc": "<p>Returns the first element yielding the smallest value of the given function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;A&#39;, &#39;num&#39;: 100}</span>\n</code></pre>\n</div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.mean_of": {"fullname": "pyiter.sequence.Sequence.mean_of", "modulename": "pyiter.sequence", "qualname": "Sequence.mean_of", "kind": "function", "doc": "<p>Returns the mean of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.sum": {"fullname": "pyiter.sequence.Sequence.sum", "modulename": "pyiter.sequence", "qualname": "Sequence.sum", "kind": "function", "doc": "<p>Returns the sum of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.max": {"fullname": "pyiter.sequence.Sequence.max", "modulename": "pyiter.sequence", "qualname": "Sequence.max", "kind": "function", "doc": "<p>Returns the maximum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.min": {"fullname": "pyiter.sequence.Sequence.min", "modulename": "pyiter.sequence", "qualname": "Sequence.min", "kind": "function", "doc": "<p>Returns the minimum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.mean": {"fullname": "pyiter.sequence.Sequence.mean", "modulename": "pyiter.sequence", "qualname": "Sequence.mean", "kind": "function", "doc": "<p>Returns the mean of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">2.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.reversed": {"fullname": "pyiter.sequence.Sequence.reversed", "modulename": "pyiter.sequence", "qualname": "Sequence.reversed", "kind": "function", "doc": "<p>Returns a list with elements in reversed order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.flat_map": {"fullname": "pyiter.sequence.Sequence.flat_map", "modulename": "pyiter.sequence", "qualname": "Sequence.flat_map", "kind": "function", "doc": "<p>Returns a single list of all elements yielded from results of [transform]\nfunction being invoked on each element of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.flatten": {"fullname": "pyiter.sequence.Sequence.flatten", "modulename": "pyiter.sequence", "qualname": "Sequence.flatten", "kind": "function", "doc": "<p>Returns a sequence of all elements from all sequences in this sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.group_by": {"fullname": "pyiter.sequence.Sequence.group_by", "modulename": "pyiter.sequence", "qualname": "Sequence.group_by", "kind": "function", "doc": "<p>Returns a dictionary with keys being the result of [key_selector] function being invoked on each element of original collection\nand values being the corresponding elements of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(1, [1, 3, 5]), (0, [2, 4])]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Grouping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.group_by_to": {"fullname": "pyiter.sequence.Sequence.group_by_to", "modulename": "pyiter.sequence", "qualname": "Sequence.group_by_to", "kind": "function", "doc": "<p>Returns a dictionary with keys being the result of [key_selector] function being invoked on each element of original collection\nand values being the corresponding elements of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by_to</span><span class=\"p\">({},</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">{1: [1, 3, 5], 0: [2, 4]}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">key_selector</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.for_each": {"fullname": "pyiter.sequence.Sequence.for_each", "modulename": "pyiter.sequence", "qualname": "Sequence.for_each", "kind": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n<span class=\"go\">a 0</span>\n<span class=\"go\">b 1</span>\n<span class=\"go\">c 2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_for_each": {"fullname": "pyiter.sequence.Sequence.parallel_for_each", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_for_each", "kind": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence in parallel.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.foreach_indexed": {"fullname": "pyiter.sequence.Sequence.foreach_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.foreach_indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.on_each": {"fullname": "pyiter.sequence.Sequence.on_each", "modulename": "pyiter.sequence", "qualname": "Sequence.on_each", "kind": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a 0</span>\n<span class=\"go\">b 1</span>\n<span class=\"go\">c 2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_on_each": {"fullname": "pyiter.sequence.Sequence.parallel_on_each", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_on_each", "kind": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Thread&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Process&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Thread&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.on_each_indexed": {"fullname": "pyiter.sequence.Sequence.on_each_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.on_each_indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.zip": {"fullname": "pyiter.sequence.Sequence.zip", "modulename": "pyiter.sequence", "qualname": "Sequence.zip", "kind": "function", "doc": "<p>Returns a new Sequence of tuples, where each tuple contains two elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;__&#39;</span> <span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span> <span class=\"n\">y</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a__1&#39;, &#39;b__2&#39;, &#39;c__3&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.zip_with_next": {"fullname": "pyiter.sequence.Sequence.zip_with_next", "modulename": "pyiter.sequence", "qualname": "Sequence.zip_with_next", "kind": "function", "doc": "<p>Returns a sequence containing the results of applying the given [transform] function\nto an each pair of two adjacent elements in this sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip_with_next</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;__&#39;</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a__b&#39;, &#39;b__c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip_with_next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.unzip": {"fullname": "pyiter.sequence.Sequence.unzip", "modulename": "pyiter.sequence", "qualname": "Sequence.unzip", "kind": "function", "doc": "<p>Returns a pair of lists, where first list is built from the first values of each pair from this array, second list is built from the second values of each pair from this array.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unzip</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">[11, 12, 13]</span>\n</code></pre>\n</div>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unzip</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">[11, 12, 13]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">as_sequence</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.with_index": {"fullname": "pyiter.sequence.Sequence.with_index", "modulename": "pyiter.sequence", "qualname": "Sequence.with_index", "kind": "function", "doc": "<p>Returns a sequence containing the elements of this sequence and their indexes.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[IndexedValue(0, a), IndexedValue(1, b), IndexedValue(2, c)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.shuffled": {"fullname": "pyiter.sequence.Sequence.shuffled", "modulename": "pyiter.sequence", "qualname": "Sequence.shuffled", "kind": "function", "doc": "<p>Returns a sequence that yields elements of this sequence randomly shuffled\nusing the specified [random] instance as the source of randomness.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;a&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">Random</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"n\">Random</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;a&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Optional[Union[Random, int, str]]&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.partition": {"fullname": "pyiter.sequence.Sequence.partition", "modulename": "pyiter.sequence", "qualname": "Sequence.partition", "kind": "function", "doc": "<p>Partitions the elements of the given Sequence into two groups,\nthe first group containing the elements for which the predicate returns true,\nand the second containing the rest.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">())</span>\n<span class=\"go\">([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;2&#39;])</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">([&#39;a&#39;, &#39;c&#39;], [&#39;b&#39;, &#39;2&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">as_sequence</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.partition_indexed": {"fullname": "pyiter.sequence.Sequence.partition_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.partition_indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">as_sequence</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.indexed": {"fullname": "pyiter.sequence.Sequence.indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.indexed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">IndexedValue</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.combinations": {"fullname": "pyiter.sequence.Sequence.combinations", "modulename": "pyiter.sequence", "qualname": "Sequence.combinations", "kind": "function", "doc": "<p>Returns a Sequence of all possible combinations of size [n] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;c&#39;)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.nth": {"fullname": "pyiter.sequence.Sequence.nth", "modulename": "pyiter.sequence", "qualname": "Sequence.nth", "kind": "function", "doc": "<p>Returns the nth element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;c&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.windowed": {"fullname": "pyiter.sequence.Sequence.windowed", "modulename": "pyiter.sequence", "qualname": "Sequence.windowed", "kind": "function", "doc": "<p>Returns a Sequence of all possible sliding windows of size [size] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre>\n</div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;], [&#39;e&#39;, &#39;f&#39;]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">partialWindows</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.chunked": {"fullname": "pyiter.sequence.Sequence.chunked", "modulename": "pyiter.sequence", "qualname": "Sequence.chunked", "kind": "function", "doc": "<p>Returns a Sequence of all possible chunks of size [size] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chunked</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chunked</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;d&#39;, &#39;e&#39;, &#39;f&#39;]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.repeat": {"fullname": "pyiter.sequence.Sequence.repeat", "modulename": "pyiter.sequence", "qualname": "Sequence.repeat", "kind": "function", "doc": "<p>Returns a Sequence containing this sequence repeated n times.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.concat": {"fullname": "pyiter.sequence.Sequence.concat", "modulename": "pyiter.sequence", "qualname": "Sequence.concat", "kind": "function", "doc": "<p>Returns a Sequence of all elements of the given Sequence, followed by all elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">,</span> <span class=\"n\">lst3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.intersect": {"fullname": "pyiter.sequence.Sequence.intersect", "modulename": "pyiter.sequence", "qualname": "Sequence.intersect", "kind": "function", "doc": "<p>Returns a set containing all elements that are contained by both this collection and the specified collection.</p>\n\n<p>The returned set preserves the element iteration order of the original collection.</p>\n\n<p>To get a set containing all elements that are contained at least in one of these collections use union.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersect</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersect</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">,</span> <span class=\"n\">lst3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersect</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.union": {"fullname": "pyiter.sequence.Sequence.union", "modulename": "pyiter.sequence", "qualname": "Sequence.union", "kind": "function", "doc": "<p>Returns a set containing all distinct elements from both collections.</p>\n\n<p>The returned set preserves the element iteration order of the original collection. Those elements of the other collection that are unique are iterated in the end in the order of the other collection.</p>\n\n<p>To get a set containing all elements that are contained in both collections use intersect.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a2&#39;, &#39;b2&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">,</span> <span class=\"n\">lst3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a2&#39;, &#39;a3&#39;, &#39;c3&#39;]</span>\n</code></pre>\n</div>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;c&#39;, &#39;a2&#39;, &#39;b2&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.join": {"fullname": "pyiter.sequence.Sequence.join", "modulename": "pyiter.sequence", "qualname": "Sequence.join", "kind": "function", "doc": "<p>Joins the elements of the given Sequence into a string.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;a, b, c&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.progress": {"fullname": "pyiter.sequence.Sequence.progress", "modulename": "pyiter.sequence", "qualname": "Sequence.progress", "kind": "function", "doc": "<p>Returns a Sequence that enable a progress bar for the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">():</span> <span class=\"k\">pass</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">progress_func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;tqdm&#39;</span><span class=\"p\">],</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;tqdm_rich&#39;</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.typing_as": {"fullname": "pyiter.sequence.Sequence.typing_as", "modulename": "pyiter.sequence", "qualname": "Sequence.typing_as", "kind": "function", "doc": "<p>Cast the element as specific Type to gain code completion base on type annotations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">typ</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.to_set": {"fullname": "pyiter.sequence.Sequence.to_set", "modulename": "pyiter.sequence", "qualname": "Sequence.to_set", "kind": "function", "doc": "<p>Returns a set containing all elements of this Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_set</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.to_dict": {"fullname": "pyiter.sequence.Sequence.to_dict", "modulename": "pyiter.sequence", "qualname": "Sequence.to_dict", "kind": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">V</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.to_list": {"fullname": "pyiter.sequence.Sequence.to_list", "modulename": "pyiter.sequence", "qualname": "Sequence.to_list", "kind": "function", "doc": "<p>Returns a list with elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.to_list_async": {"fullname": "pyiter.sequence.Sequence.to_list_async", "modulename": "pyiter.sequence", "qualname": "Sequence.to_list_async", "kind": "function", "doc": "<p>Returns a list with elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, "pyiter.sequence.Sequence.let": {"fullname": "pyiter.sequence.Sequence.let", "modulename": "pyiter.sequence", "qualname": "Sequence.let", "kind": "function", "doc": "<p>Calls the specified function [block] with <code>self</code> value as its argument and returns its result.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">let</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;!&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a!&#39;, &#39;b!&#39;, &#39;c!&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"o\">~</span><span class=\"n\">R</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">R</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.also": {"fullname": "pyiter.sequence.Sequence.also", "modulename": "pyiter.sequence", "qualname": "Sequence.also", "kind": "function", "doc": "<p>Calls the specified function [block] with <code>self</code> value as its argument and returns <code>self</code> value.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">also</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;!&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.Sequence.size": {"fullname": "pyiter.sequence.Sequence.size", "modulename": "pyiter.sequence", "qualname": "Sequence.size", "kind": "variable", "doc": "<p>Returns the size of the given Sequence.</p>\n", "annotation": ": int"}, "pyiter.sequence.Sequence.len": {"fullname": "pyiter.sequence.Sequence.len", "modulename": "pyiter.sequence", "qualname": "Sequence.len", "kind": "variable", "doc": "<p>Returns the length of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">len</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">len</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n", "annotation": ": int"}, "pyiter.sequence.Sequence.is_empty": {"fullname": "pyiter.sequence.Sequence.is_empty", "modulename": "pyiter.sequence", "qualname": "Sequence.is_empty", "kind": "function", "doc": "<p>Returns True if the Sequence is empty, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.AutoIncrementIndex": {"fullname": "pyiter.sequence.AutoIncrementIndex", "modulename": "pyiter.sequence", "qualname": "AutoIncrementIndex", "kind": "class", "doc": "<p></p>\n"}, "pyiter.sequence.AutoIncrementIndex.idx": {"fullname": "pyiter.sequence.AutoIncrementIndex.idx", "modulename": "pyiter.sequence", "qualname": "AutoIncrementIndex.idx", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, "pyiter.sequence.SequenceTransform": {"fullname": "pyiter.sequence.SequenceTransform", "modulename": "pyiter.sequence", "qualname": "SequenceTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~IterableS, ~T], typing.Iterable[~T]"}, "pyiter.sequence.SequenceTransform.__init__": {"fullname": "pyiter.sequence.SequenceTransform.__init__", "modulename": "pyiter.sequence", "qualname": "SequenceTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">IterableS</span></span>)</span>"}, "pyiter.sequence.SequenceTransform.as_sequence": {"fullname": "pyiter.sequence.SequenceTransform.as_sequence", "modulename": "pyiter.sequence", "qualname": "SequenceTransform.as_sequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.FilteringTransform": {"fullname": "pyiter.sequence.FilteringTransform", "modulename": "pyiter.sequence", "qualname": "FilteringTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.MappingTransform": {"fullname": "pyiter.sequence.MappingTransform", "modulename": "pyiter.sequence", "qualname": "MappingTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~R]"}, "pyiter.sequence.ParallelMappingTransform": {"fullname": "pyiter.sequence.ParallelMappingTransform", "modulename": "pyiter.sequence", "qualname": "ParallelMappingTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[pyiter.sequence.Sequence[~T], ~R]"}, "pyiter.sequence.ParallelMappingTransform.Executor": {"fullname": "pyiter.sequence.ParallelMappingTransform.Executor", "modulename": "pyiter.sequence", "qualname": "ParallelMappingTransform.Executor", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Literal[&#x27;Thread&#x27;, &#x27;Process&#x27;]"}, "pyiter.sequence.IndexedValue": {"fullname": "pyiter.sequence.IndexedValue", "modulename": "pyiter.sequence", "qualname": "IndexedValue", "kind": "class", "doc": "<p>IndexedValue(val, idx)</p>\n", "bases": "typing.NamedTuple, typing.Generic[~T]"}, "pyiter.sequence.IndexedValue.__init__": {"fullname": "pyiter.sequence.IndexedValue.__init__", "modulename": "pyiter.sequence", "qualname": "IndexedValue.__init__", "kind": "function", "doc": "<p>Create new instance of IndexedValue(val, idx)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;T&#39;</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "pyiter.sequence.IndexedValue.val": {"fullname": "pyiter.sequence.IndexedValue.val", "modulename": "pyiter.sequence", "qualname": "IndexedValue.val", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": ~T"}, "pyiter.sequence.IndexedValue.idx": {"fullname": "pyiter.sequence.IndexedValue.idx", "modulename": "pyiter.sequence", "qualname": "IndexedValue.idx", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, "pyiter.sequence.FlatteningTransform": {"fullname": "pyiter.sequence.FlatteningTransform", "modulename": "pyiter.sequence", "qualname": "FlatteningTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[typing.Iterable[~T]], ~T]"}, "pyiter.sequence.DropTransform": {"fullname": "pyiter.sequence.DropTransform", "modulename": "pyiter.sequence", "qualname": "DropTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.DropWhileTransform": {"fullname": "pyiter.sequence.DropWhileTransform", "modulename": "pyiter.sequence", "qualname": "DropWhileTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.TakeTransform": {"fullname": "pyiter.sequence.TakeTransform", "modulename": "pyiter.sequence", "qualname": "TakeTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.TakeWhileTransform": {"fullname": "pyiter.sequence.TakeWhileTransform", "modulename": "pyiter.sequence", "qualname": "TakeWhileTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.MergingTransform": {"fullname": "pyiter.sequence.MergingTransform", "modulename": "pyiter.sequence", "qualname": "MergingTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~V]"}, "pyiter.sequence.IntersectionTransform": {"fullname": "pyiter.sequence.IntersectionTransform", "modulename": "pyiter.sequence", "qualname": "IntersectionTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[typing.Iterable[~T]], ~T]"}, "pyiter.sequence.MergingWithNextTransform": {"fullname": "pyiter.sequence.MergingWithNextTransform", "modulename": "pyiter.sequence", "qualname": "MergingWithNextTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~V]"}, "pyiter.sequence.DistinctTransform": {"fullname": "pyiter.sequence.DistinctTransform", "modulename": "pyiter.sequence", "qualname": "DistinctTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.Grouping": {"fullname": "pyiter.sequence.Grouping", "modulename": "pyiter.sequence", "qualname": "Grouping", "kind": "class", "doc": "<p>Grouping(key, values)</p>\n", "bases": "typing.NamedTuple, typing.Generic[~K, ~T]"}, "pyiter.sequence.Grouping.__init__": {"fullname": "pyiter.sequence.Grouping.__init__", "modulename": "pyiter.sequence", "qualname": "Grouping.__init__", "kind": "function", "doc": "<p>Create new instance of Grouping(key, values)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;K&#39;</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sequence[T]&#39;</span><span class=\"p\">)</span></span>)</span>"}, "pyiter.sequence.Grouping.key": {"fullname": "pyiter.sequence.Grouping.key", "modulename": "pyiter.sequence", "qualname": "Grouping.key", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": ~K"}, "pyiter.sequence.Grouping.values": {"fullname": "pyiter.sequence.Grouping.values", "modulename": "pyiter.sequence", "qualname": "Grouping.values", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.GroupingTransform": {"fullname": "pyiter.sequence.GroupingTransform", "modulename": "pyiter.sequence", "qualname": "GroupingTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], pyiter.sequence.Grouping[~K, ~T]]"}, "pyiter.sequence.GroupingTransform.keys": {"fullname": "pyiter.sequence.GroupingTransform.keys", "modulename": "pyiter.sequence", "qualname": "GroupingTransform.keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[~K]"}, "pyiter.sequence.GroupingTransform.values": {"fullname": "pyiter.sequence.GroupingTransform.values", "modulename": "pyiter.sequence", "qualname": "GroupingTransform.values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[pyiter.sequence.Sequence[~T]]"}, "pyiter.sequence.GroupingTransform.items": {"fullname": "pyiter.sequence.GroupingTransform.items", "modulename": "pyiter.sequence", "qualname": "GroupingTransform.items", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[pyiter.sequence.Grouping[~K, ~T]]"}, "pyiter.sequence.CombinationTransform": {"fullname": "pyiter.sequence.CombinationTransform", "modulename": "pyiter.sequence", "qualname": "CombinationTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], typing.Tuple[~T, ...]]"}, "pyiter.sequence.WindowedTransform": {"fullname": "pyiter.sequence.WindowedTransform", "modulename": "pyiter.sequence", "qualname": "WindowedTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], typing.List[~T]]"}, "pyiter.sequence.ConcatTransform": {"fullname": "pyiter.sequence.ConcatTransform", "modulename": "pyiter.sequence", "qualname": "ConcatTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[typing.Iterable[~T]], ~T]"}, "pyiter.sequence.ShufflingTransform": {"fullname": "pyiter.sequence.ShufflingTransform", "modulename": "pyiter.sequence", "qualname": "ShufflingTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[typing.Iterable[~T], ~T]"}, "pyiter.sequence.ProgressTransform": {"fullname": "pyiter.sequence.ProgressTransform", "modulename": "pyiter.sequence", "qualname": "ProgressTransform", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "pyiter.sequence.SequenceTransform[pyiter.sequence.Sequence[~T], ~T]"}, "pyiter.sequence.ProgressTransform.len": {"fullname": "pyiter.sequence.ProgressTransform.len", "modulename": "pyiter.sequence", "qualname": "ProgressTransform.len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "pyiter.sequence.throw": {"fullname": "pyiter.sequence.throw", "modulename": "pyiter.sequence", "qualname": "throw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.none_or": {"fullname": "pyiter.sequence.none_or", "modulename": "pyiter.sequence", "qualname": "none_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.none_or_else": {"fullname": "pyiter.sequence.none_or_else", "modulename": "pyiter.sequence", "qualname": "none_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.SequenceProducer": {"fullname": "pyiter.sequence.SequenceProducer", "modulename": "pyiter.sequence", "qualname": "SequenceProducer", "kind": "class", "doc": "<p></p>\n"}, "pyiter.sequence.SequenceProducer.json": {"fullname": "pyiter.sequence.SequenceProducer.json", "modulename": "pyiter.sequence", "qualname": "SequenceProducer.json", "kind": "function", "doc": "<p>Reads and parses the input of a json file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyiter</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pyiter.sequence.SequenceProducer.csv": {"fullname": "pyiter.sequence.SequenceProducer.csv", "modulename": "pyiter.sequence", "qualname": "SequenceProducer.csv", "kind": "function", "doc": "<p>Reads and parses the input of a csv file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pyiter.sequence.SequenceProducer.read_csv": {"fullname": "pyiter.sequence.SequenceProducer.read_csv", "modulename": "pyiter.sequence", "qualname": "SequenceProducer.read_csv", "kind": "function", "doc": "<p>Reads and parses the input of a csv file.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;tests/data/a.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[{&#39;a&#39;: &#39;a1&#39;, &#39;b&#39;: &#39;1&#39;}, {&#39;a&#39;: &#39;a2&#39;, &#39;b&#39;: &#39;2&#39;}]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pyiter.sequence.sequence": {"fullname": "pyiter.sequence.sequence", "modulename": "pyiter.sequence", "qualname": "sequence", "kind": "variable", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre>\n</div>\n", "default_value": "&lt;pyiter.sequence.SequenceProducer object&gt;"}, "pyiter.sequence.seq": {"fullname": "pyiter.sequence.seq", "modulename": "pyiter.sequence", "qualname": "seq", "kind": "variable", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre>\n</div>\n", "default_value": "&lt;pyiter.sequence.SequenceProducer object&gt;"}, "pyiter.sequence.iterate": {"fullname": "pyiter.sequence.iterate", "modulename": "pyiter.sequence", "qualname": "iterate", "kind": "variable", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre>\n</div>\n", "default_value": "&lt;pyiter.sequence.SequenceProducer object&gt;"}, "pyiter.sequence.it": {"fullname": "pyiter.sequence.it", "modulename": "pyiter.sequence", "qualname": "it", "kind": "variable", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre>\n</div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre>\n</div>\n", "default_value": "&lt;pyiter.sequence.SequenceProducer object&gt;"}}, "docInfo": {"pyiter": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 339}, "pyiter.sequence": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 34}, "pyiter.sequence.Sequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 327}, "pyiter.sequence.Sequence.filter_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.filter_is_instance": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 124}, "pyiter.sequence.Sequence.filter_not": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 330}, "pyiter.sequence.Sequence.filter_not_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 117}, "pyiter.sequence.Sequence.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 459}, "pyiter.sequence.Sequence.map_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.map_async": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 20}, "pyiter.sequence.Sequence.map_not_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 186}, "pyiter.sequence.Sequence.parallel_map": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 543}, "pyiter.sequence.Sequence.find": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 136}, "pyiter.sequence.Sequence.find_last": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 137}, "pyiter.sequence.Sequence.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 487}, "pyiter.sequence.Sequence.first_not_none_of": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 357}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"qualname": 7, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 340}, "pyiter.sequence.Sequence.first_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 293}, "pyiter.sequence.Sequence.first_or_default": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 398}, "pyiter.sequence.Sequence.last": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 174}, "pyiter.sequence.Sequence.last_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 322}, "pyiter.sequence.Sequence.index_of_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 212}, "pyiter.sequence.Sequence.index_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 212}, "pyiter.sequence.Sequence.index_of_or": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 226}, "pyiter.sequence.Sequence.index_of_or_else": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 242}, "pyiter.sequence.Sequence.last_index_of_or_none": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 224}, "pyiter.sequence.Sequence.last_index_of": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 224}, "pyiter.sequence.Sequence.last_index_of_or": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 243}, "pyiter.sequence.Sequence.last_index_of_or_else": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 259}, "pyiter.sequence.Sequence.index_of_first_or_none": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 247}, "pyiter.sequence.Sequence.index_of_first": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 360}, "pyiter.sequence.Sequence.index_of_first_or": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 381}, "pyiter.sequence.Sequence.index_of_first_or_else": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 418}, "pyiter.sequence.Sequence.index_of_last_or_none": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 257}, "pyiter.sequence.Sequence.index_of_last": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 370}, "pyiter.sequence.Sequence.index_of_last_or": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 395}, "pyiter.sequence.Sequence.index_of_last_o_else": {"qualname": 6, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 434}, "pyiter.sequence.Sequence.single": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 287}, "pyiter.sequence.Sequence.single_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 234}, "pyiter.sequence.Sequence.drop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 333}, "pyiter.sequence.Sequence.drop_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 138}, "pyiter.sequence.Sequence.skip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 333}, "pyiter.sequence.Sequence.skip_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 138}, "pyiter.sequence.Sequence.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 219}, "pyiter.sequence.Sequence.take_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 162}, "pyiter.sequence.Sequence.take_last": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 221}, "pyiter.sequence.Sequence.sorted": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 231}, "pyiter.sequence.Sequence.sorted_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 365}, "pyiter.sequence.Sequence.sorted_descending": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 124}, "pyiter.sequence.Sequence.sorted_by_descending": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 368}, "pyiter.sequence.Sequence.sorted_with": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 162}, "pyiter.sequence.Sequence.associate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 147}, "pyiter.sequence.Sequence.associate_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 121, "bases": 0, "doc": 275}, "pyiter.sequence.Sequence.associate_by_to": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 119, "bases": 0, "doc": 286}, "pyiter.sequence.Sequence.all": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 161}, "pyiter.sequence.Sequence.any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 161}, "pyiter.sequence.Sequence.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 190}, "pyiter.sequence.Sequence.contains": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 125}, "pyiter.sequence.Sequence.element_at": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 194}, "pyiter.sequence.Sequence.element_at_or_else": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 183}, "pyiter.sequence.Sequence.element_at_or_default": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 167}, "pyiter.sequence.Sequence.element_at_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 147}, "pyiter.sequence.Sequence.distinct": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 323}, "pyiter.sequence.Sequence.distinct_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 136}, "pyiter.sequence.Sequence.reduce": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 116}, "pyiter.sequence.Sequence.fold": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 122}, "pyiter.sequence.Sequence.sum_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 102}, "pyiter.sequence.Sequence.max_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 100}, "pyiter.sequence.Sequence.max_by_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 274}, "pyiter.sequence.Sequence.max_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 282}, "pyiter.sequence.Sequence.min_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 100}, "pyiter.sequence.Sequence.min_by_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 274}, "pyiter.sequence.Sequence.min_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 282}, "pyiter.sequence.Sequence.mean_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 103}, "pyiter.sequence.Sequence.sum": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 88}, "pyiter.sequence.Sequence.max": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "pyiter.sequence.Sequence.min": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "pyiter.sequence.Sequence.mean": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 89}, "pyiter.sequence.Sequence.reversed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 117}, "pyiter.sequence.Sequence.flat_map": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 174}, "pyiter.sequence.Sequence.flatten": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 151}, "pyiter.sequence.Sequence.group_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 200}, "pyiter.sequence.Sequence.group_by_to": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 146}, "pyiter.sequence.Sequence.for_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 252}, "pyiter.sequence.Sequence.parallel_for_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 253}, "pyiter.sequence.Sequence.foreach_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.on_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 264}, "pyiter.sequence.Sequence.parallel_on_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 263}, "pyiter.sequence.Sequence.on_each_indexed": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.zip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 347}, "pyiter.sequence.Sequence.zip_with_next": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 278}, "pyiter.sequence.Sequence.unzip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 443}, "pyiter.sequence.Sequence.with_index": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 121}, "pyiter.sequence.Sequence.shuffled": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 388}, "pyiter.sequence.Sequence.partition": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 310}, "pyiter.sequence.Sequence.partition_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.indexed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.combinations": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 137}, "pyiter.sequence.Sequence.nth": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 107}, "pyiter.sequence.Sequence.windowed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 491}, "pyiter.sequence.Sequence.chunked": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 308}, "pyiter.sequence.Sequence.repeat": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 122}, "pyiter.sequence.Sequence.concat": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 352}, "pyiter.sequence.Sequence.intersect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 554}, "pyiter.sequence.Sequence.union": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 600}, "pyiter.sequence.Sequence.join": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 114}, "pyiter.sequence.Sequence.progress": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 115, "bases": 0, "doc": 276}, "pyiter.sequence.Sequence.typing_as": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 17}, "pyiter.sequence.Sequence.to_set": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 125}, "pyiter.sequence.Sequence.to_dict": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 274}, "pyiter.sequence.Sequence.to_list": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 90}, "pyiter.sequence.Sequence.to_list_async": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 90}, "pyiter.sequence.Sequence.let": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 147}, "pyiter.sequence.Sequence.also": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 149}, "pyiter.sequence.Sequence.size": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "pyiter.sequence.Sequence.len": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 179}, "pyiter.sequence.Sequence.is_empty": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "pyiter.sequence.AutoIncrementIndex": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.AutoIncrementIndex.idx": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.SequenceTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.SequenceTransform.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "pyiter.sequence.SequenceTransform.as_sequence": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "pyiter.sequence.FilteringTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.MappingTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.ParallelMappingTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.ParallelMappingTransform.Executor": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.IndexedValue": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 6}, "pyiter.sequence.IndexedValue.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 10}, "pyiter.sequence.IndexedValue.val": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pyiter.sequence.IndexedValue.idx": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pyiter.sequence.FlatteningTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.DropTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.DropWhileTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.TakeTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.TakeWhileTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.MergingTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.IntersectionTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.MergingWithNextTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.DistinctTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.Grouping": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 6}, "pyiter.sequence.Grouping.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 10}, "pyiter.sequence.Grouping.key": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pyiter.sequence.Grouping.values": {"qualname": 2, "fullname": 4, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pyiter.sequence.GroupingTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 87}, "pyiter.sequence.GroupingTransform.keys": {"qualname": 2, "fullname": 4, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingTransform.values": {"qualname": 2, "fullname": 4, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingTransform.items": {"qualname": 2, "fullname": 4, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.CombinationTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 87}, "pyiter.sequence.WindowedTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.ConcatTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.ShufflingTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 87}, "pyiter.sequence.ProgressTransform": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 87}, "pyiter.sequence.ProgressTransform.len": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.throw": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "pyiter.sequence.none_or": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 3}, "pyiter.sequence.none_or_else": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 3}, "pyiter.sequence.SequenceProducer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.SequenceProducer.json": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 12}, "pyiter.sequence.SequenceProducer.csv": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 12}, "pyiter.sequence.SequenceProducer.read_csv": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 89}, "pyiter.sequence.sequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 288}, "pyiter.sequence.seq": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 288}, "pyiter.sequence.iterate": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 288}, "pyiter.sequence.it": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 288}}, "length": 166, "save": true}, "index": {"qualname": {"root": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}}, "df": 119, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}}, "df": 3}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.SequenceProducer": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 2}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.size": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ShufflingTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 17, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}}, "df": 6, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}}, "df": 4}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.IntersectionTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}}, "df": 2}}, "t": {"docs": {"pyiter.sequence.it": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.iterate": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.FilteringTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}}, "df": 9}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}}, "r": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.FlatteningTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 16}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 6, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MappingTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "x": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MergingTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MergingWithNextTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}}, "df": 3}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1}}, "df": 1}}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.AutoIncrementIndex": {"tf": 1}, "pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 12}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}, "n": {"docs": {"pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 2}}}, "o": {"docs": {"pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}}, "df": 1, "f": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}}, "df": 22}, "r": {"docs": {"pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 23}, "n": {"docs": {"pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DropTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DropWhileTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DistinctTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 5}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.WindowedTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.TakeTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.TakeWhileTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 6}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.throw": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 11}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.contains": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ConcatTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.CombinationTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.IndexedValue.val": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Grouping.key": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.GroupingTransform.keys": {"tf": 1}}, "df": 1}}}}}}, "fullname": {"root": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.AutoIncrementIndex": {"tf": 1}, "pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}, "pyiter.sequence.SequenceProducer": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 166}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.typing_as": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.size": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.is_empty": {"tf": 1.4142135623730951}, "pyiter.sequence.AutoIncrementIndex": {"tf": 1}, "pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}, "pyiter.sequence.SequenceProducer": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 165, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}}, "df": 3}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.SequenceProducer": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 2}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.size": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ShufflingTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 17, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}}, "df": 6, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}}, "df": 4}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.IntersectionTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}}, "df": 2}}, "t": {"docs": {"pyiter.sequence.it": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.iterate": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.FilteringTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}}, "df": 9}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}}, "r": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.FlatteningTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 16}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 6, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MappingTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "x": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MergingTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.MergingWithNextTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}}, "df": 3}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1}}, "df": 1}}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.AutoIncrementIndex": {"tf": 1}, "pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 12}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}, "n": {"docs": {"pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 2}}}, "o": {"docs": {"pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}}, "df": 1, "f": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}}, "df": 22}, "r": {"docs": {"pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 23}, "n": {"docs": {"pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DropTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DropWhileTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.DistinctTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 5}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.WindowedTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.TakeTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.TakeWhileTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 6}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.throw": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 11}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.contains": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.ConcatTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.CombinationTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.IndexedValue.val": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Grouping.key": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.GroupingTransform.keys": {"tf": 1}}, "df": 1}}}}}}, "annotation": {"root": {"docs": {"pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.ProgressTransform.len": {"tf": 1}}, "df": 4}}}, "t": {"docs": {"pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 2}, "k": {"docs": {"pyiter.sequence.Grouping.key": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform.items": {"tf": 1.4142135623730951}}, "df": 4, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.values": {"tf": 1}}, "df": 2}, "k": {"docs": {"pyiter.sequence.GroupingTransform.keys": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.GroupingTransform.values": {"tf": 1}, "pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.GroupingTransform.items": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "default_value": {"root": {"0": {"docs": {"pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1}}, "df": 1}, "docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 5, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}, "x": {"2": {"7": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}, "signature": {"root": {"0": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1}, "1": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 3}, "3": {"9": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 2}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping.__init__": {"tf": 2}}, "df": 9}, "docs": {}, "df": 0}, "docs": {"pyiter.sequence.Sequence.__init__": {"tf": 4.358898943540674}, "pyiter.sequence.Sequence.filter": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 6.48074069840786}, "pyiter.sequence.Sequence.filter_not": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.map": {"tf": 7}, "pyiter.sequence.Sequence.map_indexed": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.map_async": {"tf": 7.211102550927978}, "pyiter.sequence.Sequence.map_not_none": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.parallel_map": {"tf": 10.816653826391969}, "pyiter.sequence.Sequence.find": {"tf": 6.244997998398398}, "pyiter.sequence.Sequence.find_last": {"tf": 6.244997998398398}, "pyiter.sequence.Sequence.first": {"tf": 6.557438524302}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 8.717797887081348}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 6.708203932499369}, "pyiter.sequence.Sequence.first_or_none": {"tf": 6.928203230275509}, "pyiter.sequence.Sequence.first_or_default": {"tf": 8.246211251235321}, "pyiter.sequence.Sequence.last": {"tf": 6.557438524302}, "pyiter.sequence.Sequence.last_or_none": {"tf": 6.928203230275509}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.index_of": {"tf": 4.69041575982343}, "pyiter.sequence.Sequence.index_of_or": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 6.082762530298219}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.last_index_of": {"tf": 4.69041575982343}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 6.082762530298219}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 6.082762530298219}, "pyiter.sequence.Sequence.index_of_first": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 6.082762530298219}, "pyiter.sequence.Sequence.index_of_last": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.single": {"tf": 6.557438524302}, "pyiter.sequence.Sequence.single_or_none": {"tf": 6.928203230275509}, "pyiter.sequence.Sequence.drop": {"tf": 5.916079783099616}, "pyiter.sequence.Sequence.drop_while": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.skip": {"tf": 5.916079783099616}, "pyiter.sequence.Sequence.skip_while": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.take": {"tf": 5.916079783099616}, "pyiter.sequence.Sequence.take_while": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.take_last": {"tf": 5.916079783099616}, "pyiter.sequence.Sequence.sorted": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.sorted_by": {"tf": 6.244997998398398}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 6.244997998398398}, "pyiter.sequence.Sequence.sorted_with": {"tf": 7.483314773547883}, "pyiter.sequence.Sequence.associate": {"tf": 7.615773105863909}, "pyiter.sequence.Sequence.associate_by": {"tf": 10.099504938362077}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 9.9498743710662}, "pyiter.sequence.Sequence.all": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.any": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.count": {"tf": 6.4031242374328485}, "pyiter.sequence.Sequence.contains": {"tf": 4.69041575982343}, "pyiter.sequence.Sequence.element_at": {"tf": 4.69041575982343}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 8.06225774829855}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.distinct": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.distinct_by": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.reduce": {"tf": 8.06225774829855}, "pyiter.sequence.Sequence.fold": {"tf": 7.280109889280518}, "pyiter.sequence.Sequence.sum_of": {"tf": 7.0710678118654755}, "pyiter.sequence.Sequence.max_of": {"tf": 7.0710678118654755}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.max_by": {"tf": 6.48074069840786}, "pyiter.sequence.Sequence.min_of": {"tf": 7.0710678118654755}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 6.244997998398398}, "pyiter.sequence.Sequence.min_by": {"tf": 5.830951894845301}, "pyiter.sequence.Sequence.mean_of": {"tf": 7.0710678118654755}, "pyiter.sequence.Sequence.sum": {"tf": 7.681145747868608}, "pyiter.sequence.Sequence.max": {"tf": 7.681145747868608}, "pyiter.sequence.Sequence.min": {"tf": 7.681145747868608}, "pyiter.sequence.Sequence.mean": {"tf": 7}, "pyiter.sequence.Sequence.reversed": {"tf": 5.196152422706632}, "pyiter.sequence.Sequence.flat_map": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.flatten": {"tf": 6.4031242374328485}, "pyiter.sequence.Sequence.group_by": {"tf": 8.306623862918075}, "pyiter.sequence.Sequence.group_by_to": {"tf": 8.888194417315589}, "pyiter.sequence.Sequence.for_each": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 6.082762530298219}, "pyiter.sequence.Sequence.on_each": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 10.723805294763608}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.zip": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 8.18535277187245}, "pyiter.sequence.Sequence.unzip": {"tf": 8.717797887081348}, "pyiter.sequence.Sequence.with_index": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.shuffled": {"tf": 6.708203932499369}, "pyiter.sequence.Sequence.partition": {"tf": 6.6332495807108}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.indexed": {"tf": 6.164414002968976}, "pyiter.sequence.Sequence.combinations": {"tf": 7}, "pyiter.sequence.Sequence.nth": {"tf": 4.69041575982343}, "pyiter.sequence.Sequence.windowed": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.chunked": {"tf": 6.48074069840786}, "pyiter.sequence.Sequence.repeat": {"tf": 5.916079783099616}, "pyiter.sequence.Sequence.concat": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.intersect": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.union": {"tf": 7.3484692283495345}, "pyiter.sequence.Sequence.join": {"tf": 6.708203932499369}, "pyiter.sequence.Sequence.progress": {"tf": 9.539392014169456}, "pyiter.sequence.Sequence.typing_as": {"tf": 6.48074069840786}, "pyiter.sequence.Sequence.to_set": {"tf": 4.358898943540674}, "pyiter.sequence.Sequence.to_dict": {"tf": 8.306623862918075}, "pyiter.sequence.Sequence.to_list": {"tf": 4.358898943540674}, "pyiter.sequence.Sequence.to_list_async": {"tf": 5.744562646538029}, "pyiter.sequence.Sequence.let": {"tf": 6.855654600401044}, "pyiter.sequence.Sequence.also": {"tf": 7.745966692414834}, "pyiter.sequence.Sequence.is_empty": {"tf": 3.4641016151377544}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 3.7416573867739413}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 5.196152422706632}, "pyiter.sequence.IndexedValue.__init__": {"tf": 5.385164807134504}, "pyiter.sequence.Grouping.__init__": {"tf": 6.164414002968976}, "pyiter.sequence.throw": {"tf": 4}, "pyiter.sequence.none_or": {"tf": 5.916079783099616}, "pyiter.sequence.none_or_else": {"tf": 6.48074069840786}, "pyiter.sequence.SequenceProducer.json": {"tf": 7.745966692414834}, "pyiter.sequence.SequenceProducer.csv": {"tf": 4.242640687119285}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 6.082762530298219}}, "df": 124, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1}}, "df": 7, "s": {"docs": {"pyiter.sequence.SequenceTransform.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 52}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.indexed": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1.7320508075688772}, "pyiter.sequence.none_or_else": {"tf": 1.7320508075688772}}, "df": 82, "y": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 2, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 8}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 15}}}}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 4}}}}, "q": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 117}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 15}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 2}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 2}, "pyiter.sequence.Sequence.max": {"tf": 2}, "pyiter.sequence.Sequence.min": {"tf": 2}, "pyiter.sequence.Sequence.mean": {"tf": 2}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 2}, "pyiter.sequence.Sequence.union": {"tf": 2}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.typing_as": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 2}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.json": {"tf": 1.4142135623730951}}, "df": 56, "[": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceProducer.json": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}}, "df": 28}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 53}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 72}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 33}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.reduce": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.fold": {"tf": 2}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.typing_as": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}}, "df": 14, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 34, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1.4142135623730951}}, "df": 9}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.throw": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}}, "df": 8}}}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}}, "df": 12}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 3}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 7, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 24, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 15}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}}, "df": 8}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 6}}}}, "k": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 8}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.none_or": {"tf": 1}, "pyiter.sequence.none_or_else": {"tf": 1}}, "df": 5, "s": {"docs": {"pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1}}}}}}}}, "bases": {"root": {"docs": {"pyiter.sequence.CombinationTransform": {"tf": 1}}, "df": 1, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 14, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.CombinationTransform": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "k": {"docs": {"pyiter.sequence.Grouping": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.GroupingTransform": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}}, "df": 18}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 18}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 18, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}}, "df": 16}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 2}}}}}}}}}}}, "r": {"docs": {"pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.Grouping": {"tf": 1}}, "df": 2}}}}}}}}}}, "v": {"docs": {"pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.WindowedTransform": {"tf": 1}}, "df": 1}}}}}}}}}, "doc": {"root": {"0": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 36}, "1": {"0": {"0": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 8}, "1": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 4}, "2": {"3": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 8}, "3": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 3}, "4": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}}, "df": 1}, "6": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 2}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 2}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 2}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 2}, "pyiter.sequence.Sequence.associate_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 2}, "pyiter.sequence.Sequence.group_by_to": {"tf": 2}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 112}, "2": {"0": {"0": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "2": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}}, "df": 1}, "5": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 88}, "3": {"3": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}}, "df": 1}, "6": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "9": {"docs": {"pyiter": {"tf": 2}, "pyiter.sequence.Sequence.filter": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 2}, "pyiter.sequence.Sequence.filter_not": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.map": {"tf": 6}, "pyiter.sequence.Sequence.map_not_none": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.parallel_map": {"tf": 6.48074069840786}, "pyiter.sequence.Sequence.find": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.find_last": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.first": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.first_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.first_or_default": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.last": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.last_or_none": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 4}, "pyiter.sequence.Sequence.index_of": {"tf": 4}, "pyiter.sequence.Sequence.index_of_or": {"tf": 4}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 4}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.last_index_of": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 4}, "pyiter.sequence.Sequence.index_of_first": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_last": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.single": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.single_or_none": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.drop": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.skip": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.take": {"tf": 4}, "pyiter.sequence.Sequence.take_while": {"tf": 4}, "pyiter.sequence.Sequence.take_last": {"tf": 4}, "pyiter.sequence.Sequence.sorted": {"tf": 4}, "pyiter.sequence.Sequence.sorted_by": {"tf": 7.615773105863909}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 7.615773105863909}, "pyiter.sequence.Sequence.sorted_with": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.associate": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.associate_by": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.distinct": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reversed": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.flat_map": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.flatten": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.zip": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.unzip": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.with_index": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.shuffled": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.partition": {"tf": 5.656854249492381}, "pyiter.sequence.Sequence.combinations": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.nth": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.windowed": {"tf": 8.831760866327848}, "pyiter.sequence.Sequence.chunked": {"tf": 6.6332495807108}, "pyiter.sequence.Sequence.repeat": {"tf": 4}, "pyiter.sequence.Sequence.concat": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.intersect": {"tf": 6.928203230275509}, "pyiter.sequence.Sequence.union": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.join": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.to_set": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.to_dict": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.to_list": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.to_list_async": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.let": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.also": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.len": {"tf": 3.4641016151377544}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 4.242640687119285}, "pyiter.sequence.sequence": {"tf": 4}, "pyiter.sequence.seq": {"tf": 4}, "pyiter.sequence.iterate": {"tf": 4}, "pyiter.sequence.it": {"tf": 4}}, "df": 89}, "docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 57}, "4": {"9": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 18}, "5": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 6}, "6": {"4": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}}, "df": 5}, "8": {"1": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "9": {"9": {"docs": {"pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter": {"tf": 15.394804318340652}, "pyiter.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 15.198684153570664}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 9.1104335791443}, "pyiter.sequence.Sequence.filter_not": {"tf": 15.198684153570664}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 8.831760866327848}, "pyiter.sequence.Sequence.map": {"tf": 18.05547008526779}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_async": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.map_not_none": {"tf": 11}, "pyiter.sequence.Sequence.parallel_map": {"tf": 19.672315572906}, "pyiter.sequence.Sequence.find": {"tf": 9.486832980505138}, "pyiter.sequence.Sequence.find_last": {"tf": 9.486832980505138}, "pyiter.sequence.Sequence.first": {"tf": 18.894443627691185}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 15.394804318340652}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 15.198684153570664}, "pyiter.sequence.Sequence.first_or_none": {"tf": 14.38749456993816}, "pyiter.sequence.Sequence.first_or_default": {"tf": 16.76305461424021}, "pyiter.sequence.Sequence.last": {"tf": 11.224972160321824}, "pyiter.sequence.Sequence.last_or_none": {"tf": 15}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 11.958260743101398}, "pyiter.sequence.Sequence.index_of": {"tf": 12.083045973594572}, "pyiter.sequence.Sequence.index_of_or": {"tf": 12.449899597988733}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 12.767145334803704}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 12.24744871391589}, "pyiter.sequence.Sequence.last_index_of": {"tf": 12.36931687685298}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 12.884098726725126}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 13.19090595827292}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 12.922847983320086}, "pyiter.sequence.Sequence.index_of_first": {"tf": 15.905973720586866}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 16.34013463836819}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 17.05872210923198}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 13.19090595827292}, "pyiter.sequence.Sequence.index_of_last": {"tf": 16.1245154965971}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 16.673332000533065}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 17.549928774784245}, "pyiter.sequence.Sequence.single": {"tf": 13.711309200802088}, "pyiter.sequence.Sequence.single_or_none": {"tf": 12.569805089976535}, "pyiter.sequence.Sequence.drop": {"tf": 15.362291495737216}, "pyiter.sequence.Sequence.drop_while": {"tf": 9.797958971132712}, "pyiter.sequence.Sequence.skip": {"tf": 15.362291495737216}, "pyiter.sequence.Sequence.skip_while": {"tf": 9.797958971132712}, "pyiter.sequence.Sequence.take": {"tf": 12.569805089976535}, "pyiter.sequence.Sequence.take_while": {"tf": 10.44030650891055}, "pyiter.sequence.Sequence.take_last": {"tf": 12.569805089976535}, "pyiter.sequence.Sequence.sorted": {"tf": 12.449899597988733}, "pyiter.sequence.Sequence.sorted_by": {"tf": 14.66287829861518}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 8.774964387392123}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 14.66287829861518}, "pyiter.sequence.Sequence.sorted_with": {"tf": 10.344080432788601}, "pyiter.sequence.Sequence.associate": {"tf": 9.539392014169456}, "pyiter.sequence.Sequence.associate_by": {"tf": 13.30413469565007}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 13.601470508735444}, "pyiter.sequence.Sequence.all": {"tf": 10.723805294763608}, "pyiter.sequence.Sequence.any": {"tf": 10.723805294763608}, "pyiter.sequence.Sequence.count": {"tf": 11.661903789690601}, "pyiter.sequence.Sequence.contains": {"tf": 9.539392014169456}, "pyiter.sequence.Sequence.element_at": {"tf": 11.74734012447073}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 10.908712114635714}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 10.344080432788601}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 9.746794344808963}, "pyiter.sequence.Sequence.distinct": {"tf": 15.264337522473747}, "pyiter.sequence.Sequence.distinct_by": {"tf": 9.848857801796104}, "pyiter.sequence.Sequence.reduce": {"tf": 8.94427190999916}, "pyiter.sequence.Sequence.fold": {"tf": 9.219544457292887}, "pyiter.sequence.Sequence.sum_of": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.max_of": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 13.527749258468683}, "pyiter.sequence.Sequence.max_by": {"tf": 13.892443989449804}, "pyiter.sequence.Sequence.min_of": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 13.527749258468683}, "pyiter.sequence.Sequence.min_by": {"tf": 13.892443989449804}, "pyiter.sequence.Sequence.mean_of": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.sum": {"tf": 7.874007874011811}, "pyiter.sequence.Sequence.max": {"tf": 7.874007874011811}, "pyiter.sequence.Sequence.min": {"tf": 7.874007874011811}, "pyiter.sequence.Sequence.mean": {"tf": 7.874007874011811}, "pyiter.sequence.Sequence.reversed": {"tf": 8.774964387392123}, "pyiter.sequence.Sequence.flat_map": {"tf": 10.246950765959598}, "pyiter.sequence.Sequence.flatten": {"tf": 9.746794344808963}, "pyiter.sequence.Sequence.group_by": {"tf": 11.445523142259598}, "pyiter.sequence.Sequence.group_by_to": {"tf": 9.327379053088816}, "pyiter.sequence.Sequence.for_each": {"tf": 13.379088160259652}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 13.341664064126334}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each": {"tf": 13.674794331177344}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 13.638181696985855}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip": {"tf": 15.524174696260024}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 13.341664064126334}, "pyiter.sequence.Sequence.unzip": {"tf": 17}, "pyiter.sequence.Sequence.with_index": {"tf": 8.717797887081348}, "pyiter.sequence.Sequence.shuffled": {"tf": 16}, "pyiter.sequence.Sequence.partition": {"tf": 14.177446878757825}, "pyiter.sequence.Sequence.partition_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 9}, "pyiter.sequence.Sequence.nth": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.windowed": {"tf": 17.635192088548397}, "pyiter.sequence.Sequence.chunked": {"tf": 14.071247279470288}, "pyiter.sequence.Sequence.repeat": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.concat": {"tf": 15.394804318340652}, "pyiter.sequence.Sequence.intersect": {"tf": 19.28730152198591}, "pyiter.sequence.Sequence.union": {"tf": 19.28730152198591}, "pyiter.sequence.Sequence.join": {"tf": 8.717797887081348}, "pyiter.sequence.Sequence.progress": {"tf": 14.177446878757825}, "pyiter.sequence.Sequence.typing_as": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_set": {"tf": 9.273618495495704}, "pyiter.sequence.Sequence.to_dict": {"tf": 13.416407864998739}, "pyiter.sequence.Sequence.to_list": {"tf": 7.416198487095663}, "pyiter.sequence.Sequence.to_list_async": {"tf": 7.416198487095663}, "pyiter.sequence.Sequence.let": {"tf": 9.797958971132712}, "pyiter.sequence.Sequence.also": {"tf": 9.899494936611665}, "pyiter.sequence.Sequence.size": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.len": {"tf": 11.489125293076057}, "pyiter.sequence.Sequence.is_empty": {"tf": 1.7320508075688772}, "pyiter.sequence.AutoIncrementIndex": {"tf": 1.7320508075688772}, "pyiter.sequence.AutoIncrementIndex.idx": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceTransform": {"tf": 4}, "pyiter.sequence.SequenceTransform.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceTransform.as_sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.FilteringTransform": {"tf": 4}, "pyiter.sequence.MappingTransform": {"tf": 4}, "pyiter.sequence.ParallelMappingTransform": {"tf": 4}, "pyiter.sequence.ParallelMappingTransform.Executor": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue.val": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue.idx": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 4}, "pyiter.sequence.DropTransform": {"tf": 4}, "pyiter.sequence.DropWhileTransform": {"tf": 4}, "pyiter.sequence.TakeTransform": {"tf": 4}, "pyiter.sequence.TakeWhileTransform": {"tf": 4}, "pyiter.sequence.MergingTransform": {"tf": 4}, "pyiter.sequence.IntersectionTransform": {"tf": 4}, "pyiter.sequence.MergingWithNextTransform": {"tf": 4}, "pyiter.sequence.DistinctTransform": {"tf": 4}, "pyiter.sequence.Grouping": {"tf": 1.7320508075688772}, "pyiter.sequence.Grouping.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.Grouping.key": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping.values": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 4}, "pyiter.sequence.GroupingTransform.keys": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingTransform.values": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingTransform.items": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationTransform": {"tf": 4}, "pyiter.sequence.WindowedTransform": {"tf": 4}, "pyiter.sequence.ConcatTransform": {"tf": 4}, "pyiter.sequence.ShufflingTransform": {"tf": 4}, "pyiter.sequence.ProgressTransform": {"tf": 4}, "pyiter.sequence.ProgressTransform.len": {"tf": 1.7320508075688772}, "pyiter.sequence.throw": {"tf": 1.7320508075688772}, "pyiter.sequence.none_or": {"tf": 1.7320508075688772}, "pyiter.sequence.none_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceProducer": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceProducer.json": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 6.6332495807108}, "pyiter.sequence.sequence": {"tf": 14.212670403551895}, "pyiter.sequence.seq": {"tf": 14.212670403551895}, "pyiter.sequence.iterate": {"tf": 14.212670403551895}, "pyiter.sequence.it": {"tf": 14.212670403551895}}, "df": 166, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}}, "df": 2}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 22}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 36, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"pyiter": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 109, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}}, "df": 2, "d": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 5}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}, "n": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 18, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 5, "o": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 21, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.with_index": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 3}}}}}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 3}, "s": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 32}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 2}}}, "a": {"0": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}}, "df": 1}, "1": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 2}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 4}, "2": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 2}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 2.449489742783178}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 5}, "3": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.take_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 2}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 2}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flatten": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.zip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.unzip": {"tf": 3}, "pyiter.sequence.Sequence.with_index": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.partition": {"tf": 2}, "pyiter.sequence.Sequence.combinations": {"tf": 2}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.repeat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.intersect": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.union": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.join": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1.7320508075688772}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 116, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 10, "d": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 16}, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1.7320508075688772}}, "df": 1}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 24, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}}, "df": 7}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 18}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 8}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 4}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_map": {"tf": 3}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 8}}, "b": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}}, "df": 1}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.intersect": {"tf": 1}}, "df": 5}, "d": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 28}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}}, "df": 12}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1}}, "s": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 36}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 31}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_none": {"tf": 2}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 26}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "n": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}}, "df": 2}}, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 22}}, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 2}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 53, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 10}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 7}}}}, "f": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 90}, "u": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 1, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"1": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 2}, "pyiter.sequence.Sequence.map": {"tf": 1}}, "df": 3}, "2": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 2}}, "df": 5}, "docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 2}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.take": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.unzip": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 2}, "pyiter.sequence.Sequence.combinations": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 2}, "pyiter.sequence.Sequence.repeat": {"tf": 2}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.union": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1.4142135623730951}}, "df": 74, "y": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 36}, "u": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "b": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 19, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 20}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 2}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.fold": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 2}, "pyiter.sequence.Sequence.union": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 97, "n": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 20}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 14}, "n": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 31}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FilteringTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FlatteningTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.IntersectionTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DistinctTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.WindowedTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ConcatTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ShufflingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressTransform": {"tf": 1.7320508075688772}}, "df": 22, "s": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}, "q": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"pyiter": {"tf": 2}, "pyiter.sequence.Sequence.progress": {"tf": 2}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 2}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 2}, "pyiter.sequence.Sequence.union": {"tf": 2}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 58, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 7}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 12}}, "y": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 5, "s": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "\u3001": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 29, "s": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 19}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 47, "s": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pyiter": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 68}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 2}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 18}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}}, "df": 9, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.len": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"1": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.union": {"tf": 2.449489742783178}}, "df": 4}, "2": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.union": {"tf": 2.449489742783178}}, "df": 4}, "3": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"pyiter.sequence.Sequence.filter": {"tf": 2}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 2}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.first_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.last": {"tf": 2}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of": {"tf": 2}, "pyiter.sequence.Sequence.index_of_or": {"tf": 2}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 3}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 3}, "pyiter.sequence.Sequence.single": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.single_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.drop": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 2}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 2}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.any": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.count": {"tf": 2}, "pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct": {"tf": 2}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by": {"tf": 2}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.min_by": {"tf": 2}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 2}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.chunked": {"tf": 2}, "pyiter.sequence.Sequence.repeat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 2}}, "df": 92}}, "t": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 7}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 2}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 19, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 103}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 7, "s": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 7}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}, "pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 2}}, "df": 5, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 127}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 6}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 23, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 2}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}, "pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 53, "s": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 54}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 15}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}}, "df": 7}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}, "s": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.Sequence.is_empty": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}}, "df": 77, "s": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 21}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}}, "df": 3}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 18}}, "c": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 2}, "pyiter.sequence.Sequence.single_or_none": {"tf": 2}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 3}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.size": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}}, "df": 11}}, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 1}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 2}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.filter": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.filter_not": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.map": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.map_not_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_map": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.find": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.find_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.first_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.first_or_default": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.last": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_or": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_index_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_first": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_last": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.single": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.single_or_none": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.drop": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.drop_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.skip": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.skip_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.take": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.take_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.take_last": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3}, "pyiter.sequence.Sequence.sorted_with": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.associate": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.associate_by": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.all": {"tf": 3.3166247903554}, "pyiter.sequence.Sequence.any": {"tf": 3.3166247903554}, "pyiter.sequence.Sequence.count": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.contains": {"tf": 3}, "pyiter.sequence.Sequence.element_at": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 3}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 3}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 3}, "pyiter.sequence.Sequence.distinct": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reduce": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.fold": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sum_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.max_by": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.min_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.min_by": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.mean_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sum": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.mean": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reversed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.flat_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.flatten": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.group_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.group_by_to": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.zip": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.unzip": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.with_index": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.shuffled": {"tf": 4.58257569495584}, "pyiter.sequence.Sequence.partition": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.combinations": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.nth": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.windowed": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.chunked": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.repeat": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.concat": {"tf": 4.58257569495584}, "pyiter.sequence.Sequence.intersect": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.union": {"tf": 5.477225575051661}, "pyiter.sequence.Sequence.join": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.progress": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.also": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.len": {"tf": 2.449489742783178}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1.7320508075688772}, "pyiter.sequence.sequence": {"tf": 3}, "pyiter.sequence.seq": {"tf": 3}, "pyiter.sequence.iterate": {"tf": 3}, "pyiter.sequence.it": {"tf": 3}}, "df": 111}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.size": {"tf": 1}, "pyiter.sequence.Sequence.len": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 66}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 3, "s": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FilteringTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FlatteningTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.IntersectionTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DistinctTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.WindowedTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ConcatTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ShufflingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressTransform": {"tf": 1.7320508075688772}}, "df": 19, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 2}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 4}, "pyiter.sequence.Sequence.max_by": {"tf": 4}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 4}, "pyiter.sequence.Sequence.min_by": {"tf": 4}}, "df": 5}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 5}}}}, "i": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 5}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}}, "df": 13}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 29}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"pyiter": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 14, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FilteringTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.FlatteningTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DropWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.IntersectionTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.DistinctTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.WindowedTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ConcatTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ShufflingTransform": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressTransform": {"tf": 1.7320508075688772}}, "df": 19, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}}, "x": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 2}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 15}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 7}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 21}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 3, "d": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {"pyiter": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.filter": {"tf": 2}, "pyiter.sequence.Sequence.filter_not": {"tf": 2}, "pyiter.sequence.Sequence.map": {"tf": 2}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 2}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 2}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.all": {"tf": 2}, "pyiter.sequence.Sequence.any": {"tf": 2}, "pyiter.sequence.Sequence.count": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by": {"tf": 2}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.min_by": {"tf": 2}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 2.6457513110645907}, "pyiter.sequence.seq": {"tf": 2.6457513110645907}, "pyiter.sequence.iterate": {"tf": 2.6457513110645907}, "pyiter.sequence.it": {"tf": 2.6457513110645907}}, "df": 64}, "c": {"3": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each": {"tf": 2}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 2}, "pyiter.sequence.Sequence.combinations": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.chunked": {"tf": 2}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.intersect": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.union": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list_async": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.len": {"tf": 1.4142135623730951}}, "df": 61, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.repeat": {"tf": 1}, "pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 27}}}, "s": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.intersect": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.union": {"tf": 1.7320508075688772}}, "df": 16, "s": {"docs": {"pyiter.sequence.Sequence.intersect": {"tf": 1}, "pyiter.sequence.Sequence.union": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 20}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 7, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.typing_as": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 2}, "pyiter.sequence.FilteringTransform": {"tf": 2}, "pyiter.sequence.MappingTransform": {"tf": 2}, "pyiter.sequence.ParallelMappingTransform": {"tf": 2}, "pyiter.sequence.FlatteningTransform": {"tf": 2}, "pyiter.sequence.DropTransform": {"tf": 2}, "pyiter.sequence.DropWhileTransform": {"tf": 2}, "pyiter.sequence.TakeTransform": {"tf": 2}, "pyiter.sequence.TakeWhileTransform": {"tf": 2}, "pyiter.sequence.MergingTransform": {"tf": 2}, "pyiter.sequence.IntersectionTransform": {"tf": 2}, "pyiter.sequence.MergingWithNextTransform": {"tf": 2}, "pyiter.sequence.DistinctTransform": {"tf": 2}, "pyiter.sequence.GroupingTransform": {"tf": 2}, "pyiter.sequence.CombinationTransform": {"tf": 2}, "pyiter.sequence.WindowedTransform": {"tf": 2}, "pyiter.sequence.ConcatTransform": {"tf": 2}, "pyiter.sequence.ShufflingTransform": {"tf": 2}, "pyiter.sequence.ProgressTransform": {"tf": 2}}, "df": 19}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"pyiter.sequence.SequenceProducer.csv": {"tf": 1}, "pyiter.sequence.SequenceProducer.read_csv": {"tf": 1.7320508075688772}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}}, "df": 24, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Grouping": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 6}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 6}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}}, "t": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 2.23606797749979}, "pyiter.sequence.FilteringTransform": {"tf": 2.23606797749979}, "pyiter.sequence.MappingTransform": {"tf": 2.23606797749979}, "pyiter.sequence.ParallelMappingTransform": {"tf": 2.23606797749979}, "pyiter.sequence.FlatteningTransform": {"tf": 2.23606797749979}, "pyiter.sequence.DropTransform": {"tf": 2.23606797749979}, "pyiter.sequence.DropWhileTransform": {"tf": 2.23606797749979}, "pyiter.sequence.TakeTransform": {"tf": 2.23606797749979}, "pyiter.sequence.TakeWhileTransform": {"tf": 2.23606797749979}, "pyiter.sequence.MergingTransform": {"tf": 2.23606797749979}, "pyiter.sequence.IntersectionTransform": {"tf": 2.23606797749979}, "pyiter.sequence.MergingWithNextTransform": {"tf": 2.23606797749979}, "pyiter.sequence.DistinctTransform": {"tf": 2.23606797749979}, "pyiter.sequence.GroupingTransform": {"tf": 2.23606797749979}, "pyiter.sequence.CombinationTransform": {"tf": 2.23606797749979}, "pyiter.sequence.WindowedTransform": {"tf": 2.23606797749979}, "pyiter.sequence.ConcatTransform": {"tf": 2.23606797749979}, "pyiter.sequence.ShufflingTransform": {"tf": 2.23606797749979}, "pyiter.sequence.ProgressTransform": {"tf": 2.23606797749979}}, "df": 19}}, "n": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.repeat": {"tf": 1}}, "df": 6, "o": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 15, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 14}, "n": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 1}}, "df": 3, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 3}, "pyiter.sequence.Sequence.first_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.last_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 21}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 31}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.max_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.min_by": {"tf": 2.23606797749979}}, "df": 4, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.IndexedValue.val": {"tf": 1}, "pyiter.sequence.IndexedValue.idx": {"tf": 1}, "pyiter.sequence.Grouping.key": {"tf": 1}, "pyiter.sequence.Grouping.values": {"tf": 1}}, "df": 5}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.Grouping.__init__": {"tf": 1}}, "df": 5}, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}}, "df": 1}}}, "y": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}}, "df": 6, "o": {"docs": {}, "df": 0, "u": {"docs": {"pyiter.sequence.Sequence.map_async": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or_else": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 2}}, "df": 24, "e": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 19, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last_o_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.449489742783178}, "pyiter.sequence.SequenceTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.IntersectionTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingTransform": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressTransform": {"tf": 1.4142135623730951}}, "df": 27}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.SequenceTransform": {"tf": 1}, "pyiter.sequence.FilteringTransform": {"tf": 1}, "pyiter.sequence.MappingTransform": {"tf": 1}, "pyiter.sequence.ParallelMappingTransform": {"tf": 1}, "pyiter.sequence.FlatteningTransform": {"tf": 1}, "pyiter.sequence.DropTransform": {"tf": 1}, "pyiter.sequence.DropWhileTransform": {"tf": 1}, "pyiter.sequence.TakeTransform": {"tf": 1}, "pyiter.sequence.TakeWhileTransform": {"tf": 1}, "pyiter.sequence.MergingTransform": {"tf": 1}, "pyiter.sequence.IntersectionTransform": {"tf": 1}, "pyiter.sequence.MergingWithNextTransform": {"tf": 1}, "pyiter.sequence.DistinctTransform": {"tf": 1}, "pyiter.sequence.GroupingTransform": {"tf": 1}, "pyiter.sequence.CombinationTransform": {"tf": 1}, "pyiter.sequence.WindowedTransform": {"tf": 1}, "pyiter.sequence.ConcatTransform": {"tf": 1}, "pyiter.sequence.ShufflingTransform": {"tf": 1}, "pyiter.sequence.ProgressTransform": {"tf": 1}}, "df": 19}}}}}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.index_of_or_else": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of_or_else": {"tf": 1}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.union": {"tf": 1}}, "df": 3}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}}, "df": 2}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.SequenceProducer.json": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();